rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && 
             request.auth.uid != null && 
             request.auth.uid.size() > 0;
    }
    
    function isValidEmail() {
      return isAuthenticated() && 
             request.auth.token.email != null &&
             request.auth.token.email.size() > 0;
    }
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Allow reading basic user info for contacts/friends
      allow read: if isAuthenticated() && 
                     resource.data.keys().hasAny(['displayName', 'photoURL', 'status', 'isOnline']);
    }
    
    // Chats collection - participants can read/write
    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && 
                            isOwner(resource.data.participants[request.auth.uid]) ||
                            request.auth.uid in resource.data.participants;
      
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.participants[request.auth.uid]) ||
                       request.auth.uid in request.resource.data.participants;
    }
    
    // Messages subcollection within chats
    match /chats/{chatId}/messages/{messageId} {
      allow read: if isAuthenticated() && 
                     exists(/databases/$(database)/documents/chats/$(chatId)) &&
                     request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.senderId) &&
                       exists(/databases/$(database)/documents/chats/$(chatId)) &&
                       request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      
      allow update: if isAuthenticated() && 
                       isOwner(resource.data.senderId) &&
                       request.resource.data.senderId == resource.data.senderId;
      
      allow delete: if isAuthenticated() && isOwner(resource.data.senderId);
    }
    
    // Groups collection - members can read, creators can write
    match /groups/{groupId} {
      allow read: if isAuthenticated() && 
                     request.auth.uid in resource.data.members;
      
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.createdBy) &&
                       request.auth.uid in request.resource.data.members;
      
      allow update: if isAuthenticated() && 
                       (isOwner(resource.data.createdBy) || 
                        request.auth.uid in resource.data.admins);
      
      allow delete: if isAuthenticated() && isOwner(resource.data.createdBy);
    }
    
    // Group messages subcollection
    match /groups/{groupId}/messages/{messageId} {
      allow read: if isAuthenticated() && 
                     exists(/databases/$(database)/documents/groups/$(groupId)) &&
                     request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
      
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.senderId) &&
                       exists(/databases/$(database)/documents/groups/$(groupId)) &&
                       request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
      
      allow update: if isAuthenticated() && isOwner(resource.data.senderId);
      allow delete: if isAuthenticated() && 
                       (isOwner(resource.data.senderId) || 
                        request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.admins);
    }
    
    // Updates/Posts collection - users can read all, write their own
    match /updates/{updateId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.userId) &&
                       isValidUser();
      
      allow update: if isAuthenticated() && 
                       isOwner(resource.data.userId);
      
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Comments subcollection for updates
    match /updates/{updateId}/comments/{commentId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.userId) &&
                       isValidUser();
      
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && 
                       (isOwner(resource.data.userId) || 
                        isOwner(get(/databases/$(database)/documents/updates/$(updateId)).data.userId));
    }
    
    // Calls collection - participants can read/write
    match /calls/{callId} {
      allow read, write: if isAuthenticated() && 
                            (isOwner(resource.data.callerId) || 
                             isOwner(resource.data.receiverId));
      
      allow create: if isAuthenticated() && 
                       (isOwner(request.resource.data.callerId) || 
                        isOwner(request.resource.data.receiverId));
    }
    
    // Notifications collection - users can read/write their own
    match /notifications/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // Contacts collection - users can read/write their own
    match /contacts/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // User settings collection - users can read/write their own
    match /settings/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // Block/Report collections - users can read/write their own
    match /blocks/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    match /reports/{reportId} {
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.reporterId) &&
                       isValidUser();
      
      allow read: if isAuthenticated() && isOwner(resource.data.reporterId);
    }
    
    // Analytics collection - read-only for authenticated users
    match /analytics/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server can write analytics
    }
    
    // Admin collection - no client access
    match /admin/{document=**} {
      allow read, write: if false; // Only server/admin functions can access
    }
    
    // Default deny rule for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Storage rules for Firebase Storage
// Note: This should be in a separate storage.rules file
/*
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Users can upload to their own folders
    match /users/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Profile pictures - readable by all authenticated users
    match /profiles/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Updates media - readable by all authenticated users
    match /updates/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Chat media - only accessible by chat participants
    match /chats/{chatId}/{allPaths=**} {
      allow read, write: if request.auth != null;
      // Note: More complex rules would check chat membership
    }
    
    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
*/
